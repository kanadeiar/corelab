@page "/pages/form/{id:int}"
@using System.Text.Json
@using Microsoft.AspNetCore.Mvc.ModelBinding
@model FormHandlerModel

<partial name="_Validation" />

<div class="m-2">
    <h5 class="bg-primary text-white text-center p-2">HTML Form</h5>
    <form page="/pages/form" method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group">
            <label>Name</label>
            <div><span asp-validation-for="Product.Name" class="text-danger"></span></div>
            <input class="form-control" asp-for="Product.Name" />
        </div>
        <div class="form-group">
            <label>Price</label>
            <div><span asp-validation-for="Product.Price" class="text-danger"></span></div>
            <input class="form-control" asp-for="Product.Price" />
        </div>
        <div class="form-group">
            <label>Category Name</label>
            <div><span asp-validation-for="Product.CategoryId"></span></div>
            <input class="form-control" asp-for="Product.CategoryId" />
        </div>
        <div class="form-group">
            <label>Supplier</label>
            <div><span asp-validation-for="Product.SupplierId"></span></div>
            <input class="form-control" asp-for="Product.SupplierId" />
        </div>
        <button type="submit" class="btn btn-primary">
            Submit
        </button>
    </form>
</div>

@functions
{
    public class FormHandlerModel : PageModel
    {
        private readonly DataContext _dataContext;
        [BindProperty]
        public Product? Product { get; set; }
        //[BindProperty(Name = "Product.Category")]
        //public Category Category { get; set; }
        public FormHandlerModel(DataContext dataContext)
        {
            _dataContext = dataContext;
        }
        public async Task OnGetAsync(int id = 1)
        {
            Product = await _dataContext.Products.FirstAsync(x => x.Id == id);
        }
        public IActionResult OnPost()
        {
            //if (string.IsNullOrEmpty(Product.Name))
            //{
            //    ModelState.AddModelError("Product.Name", "Введите название");
            //}
            //if (ModelState.GetValidationState("Product.Price") == ModelValidationState.Valid && Product.Price < 1)
            //{
            //    ModelState.AddModelError("Product.Price", "Введите положиельное число");
            //}
            //if (ModelState.GetValidationState("Product.Name") == ModelValidationState.Valid
            //    && ModelState.GetValidationState("Product.Price") == ModelValidationState.Valid
            //    && Product.Name.ToLower().StartsWith("small")
            //    && Product.Price > 100)
            //{
            //    ModelState.AddModelError("", "Маленикие товары не могут стоить больше 100");
            //}
            //if (!_dataContext.Categiries.Any(x => x.Id == Product.CategoryId))
            //{
            //    ModelState.AddModelError("Product.CategoryId", "Введите существующий Id");
            //}
            //if (!_dataContext.Suppliers.Any(x => x.Id == Product.SupplierId))
            //{
            //    ModelState.AddModelError("Product.SupplierId", "Введите существующий Id");
            //}
            if (ModelState.IsValid)
            {
                TempData["name"] = Product.Name;
                TempData["price"] = Product.Price.ToString();
                TempData["categoryId"] = Product.CategoryId.ToString();
                TempData["supplierId"] = Product.SupplierId.ToString();
                return RedirectToPage("FormResults");
            }
            else
            {
                return Page();
            }
        }
    }
}
